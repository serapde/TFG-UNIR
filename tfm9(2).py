# -*- coding: utf-8 -*-
"""TFM9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AsvBTTf-ddc_VOSslmhAEeyCSsTDx8lu

## **Trabajo fin de master** 
## Clasificador de rentabilidad de activos mediante redes neuronales convolucionales
"""

# Commented out IPython magic to ensure Python compatibility.
import cv2
import os
import numpy as np 
import keras
import matplotlib.pyplot as plt
import glob
import re

# %matplotlib inline
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report



from keras import layers
from keras import models
from keras.optimizers import Adamax
from keras.callbacks import EarlyStopping

from keras.utils import to_categorical
from keras.models import Sequential,Input,Model
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras.layers.normalization import BatchNormalization
from keras.layers.advanced_activations import LeakyReLU
!rm -rf /content/test
!rm -rf /content/tfm
!rm -rf /content/train

# Definición de funciones que permitirán la visualización de las graficas de entrenamiento
def plot_acc(history, title="Model Accuracy"):
    """Imprime una gráfica mostrando la accuracy por epoch obtenida en un entrenamiento"""
    plt.plot(history.history['accuracy'])
    plt.plot(history.history['val_accuracy'])
    plt.title(title)
    plt.ylabel('Accuracy')
    plt.xlabel('Epoch')
    plt.legend(['Entrenamiento', 'Validación'], loc='upper left')
    plt.show()
    
def plot_loss(history, title="Model Loss"):
    """Imprime una gráfica mostrando la pérdida por epoch obtenida en un entrenamiento"""
    plt.plot(history.history['loss'])
    plt.plot(history.history['val_loss'])
    plt.title(title)
    plt.ylabel('Loss')
    plt.xlabel('Epoch')
    plt.legend(['Entrenamiento', 'Validación'], loc='upper right')
    plt.show()
    
def plot_compare_losses(history1, history2, name1="Red 1",
                        name2="Red 2", title="Graph title"):
    """Compara losses de dos entrenamientos con nombres name1 y name2"""
    plt.plot(history1.history['loss'], color="green")
    plt.plot(history1.history['val_loss'], 'r--', color="green")
    plt.plot(history2.history['loss'], color="blue")
    plt.plot(history2.history['val_loss'], 'r--', color="blue")
    plt.title(title)
    plt.ylabel('Loss')
    plt.xlabel('Epoch')
    plt.legend(['Entrenamiento ' + name1, 'Validación ' + name1, 
                'Entrenamiento ' + name2, 'Validación ' + name2],
               loc='upper right')
    plt.show()
    
def plot_compare_accs(history1, history2, name1="Red 1",
                      name2="Red 2", title="Graph title"):
    """Compara accuracies de dos entrenamientos con nombres name1 y name2"""
    plt.plot(history1.history['accuracy'], color="green")
    plt.plot(history1.history['val_accuracy'], 'r--', color="green")
    plt.plot(history2.history['accuracy'], color="blue")
    plt.plot(history2.history['val_accuracy'], 'r--', color="blue")
    plt.title(title)
    plt.ylabel('Accuracy')
    plt.xlabel('Epoch')
    plt.legend(['Train ' + name1, 'Val ' + name1, 
                'Train ' + name2, 'Val ' + name2], 
               loc='lower right')
    plt.show()

def load_dataset(dirname):

  print("Os.sep", os.sep)

  imgpath = dirname + os.sep 
  print("imgpath", imgpath)


  images = []
  directories = []
  dircount = []
  prevRoot=''
  cant=0

  print("leyendo imagenes de ",imgpath)

  for root, dirnames, filenames in os.walk(imgpath):
      for filename in filenames:
          if re.search("\.(jpg|jpeg|png|bmp|tiff)$", filename):
              cant=cant+1
              filepath = os.path.join(root, filename)
              image = plt.imread(filepath)
              images.append(image)
              b = "Leyendo..." + str(cant)
              print (b, end="\r")
              if prevRoot !=root:
                  print(root, cant)
                  prevRoot=root
                  directories.append(root)
                  dircount.append(cant)
                  cant=0
  dircount.append(cant)

  dircount = dircount[1:]
  dircount[0]=dircount[0]+1
  print('Directorios leidos:',len(directories))
  print("Imagenes en cada directorio", dircount)
  print('suma Total de imagenes en subdirs:',sum(dircount))
#Creamos las etiquetas
  labels=[]
  indice=0
  for cantidad in dircount:
      for i in range(cantidad):
          labels.append(indice)
      indice=indice+1
  print("Cantidad etiquetas creadas: ",len(labels))

  imagenes=[]
  indice=0
  for directorio in directories:
      name = directorio.split(os.sep)
      print(indice , name[len(name)-1])
      imagenes.append(name[len(name)-1])
      indice=indice+1

  y = np.array(labels)
  X = np.array(images, dtype=np.uint8) #convierto de lista a numpy

  classes = np.unique(y)
  nClasses = len(classes)
  print('Numero total de clases  : ', nClasses)
  print('Clases : ', classes)
  return X, y, nClasses

def tfmmodel(train_X, train_label,valid_X, valid_label,test_X, test_Y_one_hot):
  #declaramos variables con los parámetros de configuración de la red
  INIT_LR = 0.002 # Valor inicial de learning rate. 
  epochs = 10 # Cantidad de iteraciones completas al conjunto de imagenes de entrenamiento
  batch_size = 64 # cantidad de imágenes que se toman a la vez en memoria
  model = models.Sequential()
  model.add(Conv2D(64, kernel_size=(3, 3),padding='same',input_shape=(30,60,3)))
  model.add(MaxPooling2D(pool_size=(2,2), strides=(2,2), padding='valid'))
  model.add(BatchNormalization())

  model.add(Conv2D(128, kernel_size=(3, 3),padding='same'))
  model.add(MaxPooling2D(pool_size=(2,2), strides=(2,2), padding='valid'))
  model.add(BatchNormalization())

  model.add(Conv2D(256, kernel_size=(3, 3),padding='same'))
  model.add(MaxPooling2D(pool_size=(2,2), strides=(2,2), padding='valid'))
  model.add(BatchNormalization())

  model.add(Conv2D(512, kernel_size=(3, 3),padding='same'))
  model.add(MaxPooling2D(pool_size=(2,2), strides=(2,2), padding='valid'))
  model.add(BatchNormalization())

  model.add(Flatten())


  model.add(Dense(4096, activation='relu'))
  model.add(Dropout(0.3))
  model.add(Dense(nClasses, activation='softmax'))
  model.summary()
  model.compile(loss=keras.losses.categorical_crossentropy, optimizer=keras.optimizers.Adamax(lr=INIT_LR, decay=INIT_LR / 100),metrics=['accuracy'])
  Parada_Temprana = EarlyStopping(monitor='val_loss', mode='max', patience = 2, verbose=1)

  log_model = model.fit(train_X, train_label, batch_size=batch_size,epochs=epochs,callbacks=[Parada_Temprana],verbose=1,validation_data=(valid_X, valid_label))
  test_eval = model.evaluate(test_X, test_Y_one_hot, verbose=1)
  print('Test loss:', test_eval[0])
  print('Test accuracy:', test_eval[1])
  return log_model, model

def plot_image(train_X,test_X):
  plt.figure(figsize=[6,12])

# Mostramos la primera imagen de entrenamiento
  plt.subplot(121)
  plt.imshow(train_X[0,:,:], cmap='gray')
  plt.title("Ground Truth : {}".format(train_Y[0]))

# Mostramos la primera imagen de test
  plt.subplot(122)
  plt.imshow(test_X[0,:,:], cmap='gray')
  plt.title("Ground Truth : {}".format(test_Y[0]))

"""# Nueva sección

Cargamos datos de entrenamiento
"""

!wget 92.222.66.18/train15-141318-6-3-20000101-2017-04-11.tar.gz
!tar -xzf /content/train15-141318-6-3-20000101-2017-04-11.tar.gz
dirname = os.path.join(os.getcwd(), '/content/train')
train_X, train_Y, nClasses = load_dataset(dirname)
print('Shape entrenamiento : ', train_X.shape, train_Y.shape)

"""Cargamos datos de prueba"""

!wget 92.222.66.18/test15-355-6-3-20170411-20171231.tar.gz
!tar -xzf /content/test15-355-6-3-20170411-20171231.tar.gz
dirname = os.path.join(os.getcwd(), '/content/test')
test_X, test_Y, nClasses = load_dataset(dirname)
print('Shape test : ', test_X.shape, test_Y.shape)



#train_X.shape,valid_X.shape,train_label.shape,valid_label.shape = datasetprocessing(train_X,test_X,train_Y,test_Y)
plot_image(train_X,test_X)


train_X = train_X.astype('float32')
test_X = test_X.astype('float32')
train_X = train_X / 255.
test_X = test_X / 255.
train_Y_one_hot = to_categorical(train_Y)
test_Y_one_hot = to_categorical(test_Y)

print('Original label:', train_Y[0])
print('After conversion to one-hot:', train_Y_one_hot[0])

train_X,valid_X,train_label,valid_label = train_test_split(train_X, train_Y_one_hot, test_size=0.2, random_state=13)
print(train_X.shape,valid_X.shape,train_label.shape,valid_label.shape)

log_model ,model=tfmmodel(train_X, train_label,valid_X, valid_label,test_X, test_Y_one_hot)

test_eval = model.evaluate(test_X, test_Y_one_hot, verbose=1)
print('Test loss:', test_eval[0])
print('Test accuracy:', test_eval[1])
plot_acc(log_model, title="Modelo Accuracy-Función")
plot_loss(log_model, title="Modelo Loss-Funcion")

prediccion = model.predict(test_X)

from random import sample
lista = range(0,len(test_X))
lista_aleatoria=sample(lista,k=30)
j=0

# Ajustamos el tamaño de imagen
plt.figure(figsize=(30,30))
# Seleccionamos las 100 primeras imagenes
for i in lista_aleatoria:
    # Las visulizamos en 10 filas y 10 columnas
    plt.subplot(10,10,j+1)
    j=j+1
    plt.xticks([])
    plt.yticks([])
    # Omitimos el grid
    plt.grid(False)

    # Convertimos la image a float 32 para poder convertirla a RGB
    #img_float32 = np.float32(test_X[i]) 
    #img = cv2.cvtColor(img_float32, cv2.COLOR_BGR2RGB)

    plt.imshow(test_X[i])
    
    # Añadimos a cada imagen su etiqueta
    prediccion_etiqueta = np.argmax(prediccion[i])

    if prediccion_etiqueta == test_Y[i]:
       color = 'blue'
    else:
       color = 'red'
    
      #concatenacion=prediccion_etiqueta + '-' + test_Y[i]
    plt.xlabel('Estado',color=color)

# Finalmente visualizamos
plt.show()

from sklearn.metrics import confusion_matrix
import pandas as pd 

prediccion=model.predict(test_X)
prediccion=np.argmax(prediccion,axis=1)

  # Redefinimos una etiqueta más breve y generamos la matriz de confusión

labels = ['0','1']

cm=confusion_matrix(test_Y,prediccion)
confusion=pd.DataFrame(data=cm,index=labels,columns=labels)

  # Mostramos la Matriz numérica

print(confusion)

from sklearn.metrics import f1_score

f1=f1_score(test_Y, prediccion, average='macro')
print(f1)


target_names = ["Class {}".format(i) for i in range(nClasses)]
print(classification_report(test_Y, prediccion, target_names=target_names))